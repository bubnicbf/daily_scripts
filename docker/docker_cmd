################## image ################
#pull image
docker pull ubuntu:12.04
docker pull dl.dockerpool.com:5000/ubuntu:12.04

#list image
docker images

#create image
#             -m "comment"        -a "creater"     "parent docker id"  "repo/version" 
docker commit -m "Added json gem" -a "Docker Newbee" 0b2616b0e5a8  ouruser/sinatra:v2
# edit Dockerfile in ./
docker build -t="ouruser/sinatra:v2" .
# create image from local file of ubuntu-14.04-x86_64-minimal.tar.gz
cat ubuntu-14.04-x86_64-minimal.tar.gz  |docker import - ubuntu:14.04

#docker run image
#docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
#    options: -t:open terminal  -i:open input
docker run -t -i ubuntu:12.04 /bin/boptions

# push docker image to repo
docker push ouruser/sinatra
docker push 10.10.10.10:5000/ouruser/sinatra:v2.0

# save a image from running container
docker images
docker save -o ubuntu_14.04.tar ubuntu:14.04
docker save mynewimage > /tmp/mynewimage.tar
# save image id
docker save 7fcb4e2b13fd > registry-v2.0.tar

# run container from file ubuntu_14.04.tar
docker load --input ubuntu_14.04.tar
docker load < ubuntu_14.04.tar

# docker rm stoped containers.
docker rm $(docker ps -a -q)

# remove container and image
# docker rm :rm container  
docker rmi training/sinatra

# docker tag images: (rename REPOSITORY and TAG)
docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]
docker tag 7fcb4e2b13fd ab/registry:v2.0
# docker rm tag
docker rmi ab/registry:v2.0

# remove local not taged image
docker rmi $(docker images -q -f "dangling=true")

# remove dead container
umount /var/lib/docker/devicemapper/mnt/xxxxxxxxxxxxxxxxxxxxx
rm -rf /var/lib/docker/devicemapper/mnt/xxxxxxxxxxxxxxxxxxxxx-init/

############## container #############
docker run -t -i ubuntu:14.04 /bin/bash
docker run ubuntu:14.04 /bin/sh -c "while true; do echo hello world; sleep 1; done"
docker run -it -rm --privileged --name container -v "/opt/data:/opt/data" e8a42b86da11 /bin/bash

# list running container
docker ps 
docker logs [container ID or NAMES]
docker logs -f [container ID or NAMES]
# list all container running/stoped
docker ps -a

docker start
docker restart
# login running container
docker attach

# export and import
docker export 7691a814370e > ubuntu.tar
cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0

############## registry #############
# install local registry
#$ sudo apt-get install build-essential python-dev libevent-dev python-pip libssl-dev liblzma-dev libffi-dev
#$ git clone https://github.com/docker/docker-registry.git
#$ cd docker-registry
#$ sudo python setup.py install

docker run -d -p 5000:5000 \
           -v /home/user/registry-conf:/registry-conf \
       -e DOCKER_REGISTRY_CONFIG=/registry-conf/config.yml \
       registry

docker run \
         -e SETTINGS_FLAVOR=s3 \
         -e AWS_BUCKET=acme-docker \
         -e STORAGE_PATH=/registry \
         -e AWS_KEY=AKIAHSHB43HS3J92MXZ \
         -e AWS_SECRET=xdDowwlK7TJajV1Y7EoOZrmuPEJlHYcNP2k4j49T \
         -e SEARCH_BACKEND=sqlalchemy \
         -p 5000:5000 \
         registry

curl -v -X GET http://127.0.0.1:5000/v2/username/registry/tags/list
     
# -v pointed registry store dir
docker run -d -p 5000:5000 \
         -v /opt/data/registry:/tmp/registry 
     registry

docker -d -g /opt/youku/docker --insecure-registry index.tenxcloud.com

# -v: pointed data volume /webapp to container.
# -P: random map port to outside of container.
docker run -d -P --name web -v /webapp training/webapp python app.py

# -u: run the container with user_id:group_id (1000:1000).
# -e: run the container with env bash parameter MYSECET(no).
docker run -d -u 1000:1000 -e MYSECET=no -v /webapp training/webapp python app.py

# -p: map local port of 5000 to container port of 5000.
docker run -d -p 5000:5000 training/webapp python app.py
docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py

# --net=bridge,host,container:NAME_or_ID,none
docker run -d --net="host" --name web -p 127.0.0.1:5000:5000 -v /opt/web:/web training/webapp python app.py

# -ip: appoint a ip to docker container.
docker run -d -p 127.0.0.1:5000:5000 --ip=10.10.10.10 training/webapp python app.py

docker search centos

# list images in registry file system.
tree "${BASE_DATA_DIR}/docker/registry/v2/repositories" -L 2

# look for container info.
docker inspect web
docker inspect --format='{{.NetworkSettings.IPAddress}}' $INSTANCE_ID
docker inspect --format='{{.LogPath}}' $INSTANCE_ID
docker inspect --format '{{.Config.Env}}' $INSTANCE_ID

docker info

# adds a trigger to the metadata of the image being built
# ONBUILD ADD . /app/src

####  add auth for private docker registry.
htpasswd -c /opt/nginx/auth/docker-registry.htpasswd test

openssl genrsa -out dockerCA.key 2048
openssl req -x509 -new -nodes -key dockerCA.key -days 3650 -out dockerCA.crt
openssl genrsa -out registry.cmdb.test.net 2048
############################## Donâ€™t provide a challenge password.
openssl genrsa -out registry.cmdb.test.net.key 2048
openssl req -new -key registry.cmdb.test.net.key -out registry.cmdb.test.net.csr
openssl x509 -req -in registry.cmdb.test.net.csr -CA dockerCA.crt -CAkey dockerCA.key -CAcreateserial -out registry.cmdb.test.net.crt -days 3650
openssl x509 -req -in registry.cmdb.test.net.csr -CA dockerCA.crt -CAkey dockerCA.key -CAcreateserial -out registry.cmdb.test.net.crt -days 3650

update-ca-trust enable
cp dockerCA.crt /etc/pki/ca-trust/source/anchors/
update-ca-trust extract

curl -v -X GET https://test:test@registry.cmdb.test.net/v2/jituan/base_registry_registry/tags/list --insecure

update-ca-trust enable
mkdir -p /etc/docker/certs.d/registry.cmdb.test.net/
\cp dockerCA.crt /etc/docker/certs.d/registry.cmdb.test.net/ca.crt
update-ca-trust extract

docker login --username='test' --password='test' --email="chris.koller@dropbit.ch" https://registry.cmdb.test.net
docker login --username='test' --password='test' --email="chris.koller@dropbit.ch" https://registry.cmdb.test.net/v2/

#### get container list from remote api.
curl http://127.0.0.1:4243/containers/json | python -m json.tool
#### get container stats from remote api.
curl -s http://127.0.0.1:4243/containers/1c3b02900db9df0/stats?stream=false | python -m json.tool
#### get container info from remote api.
curl -s http://127.0.0.1:4243/containers/1c3b02900db9df0/json | python -m json.tool