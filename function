#=============================================
# send mail to somebody
#   arg1: mail head
#   arg2: mail contents
#   arg3: mail address
# 
# return:
#   0 : OK
#   1 : ERROR

function send_mail() 
{
    if [ -n "$1" -a -n "$3" ]; then
        echo "$2" | mail -s "$1" "$3";
        return $?;
    fi

    return 1;
}


#=============================================
# cp file from src to dest.
#   arg1: src
#   arg2: dest
# 
# return:
#   0 : OK
#   1 : ERROR

function cp_file() 
{
    if [ -n "$1" -a -n "$2" ]; then
        if [ "$1" != "$2" ]; then
            cp -f $1 $2;
            return $?
        else
            return 1;
        fi
    fi

    return 1;
}

#=============================================
# cp files from src/ to dest/.
#   arg1: src/
#   arg2: dest/
# 
# return:
#   0 : OK
#   1 : ERROR

function cp_files() 
{
    if [ -n "$1" -a -n "$2" ]; then
        if [ "$1" != "$2" ]; then
            cp -r -b "$1/*" "$2";
            return $?
        else
            return 1;
        fi
    fi

    return 1;
}

#=============================================
# mv file from src to dest.
#   arg1: src
#   arg2: dest
# 
# return:
#   0 : OK
#   1 : ERROR
function mv_file() 
{
    if [ -n "$1" -a -n "$2" ]; then
        if [ "$1" != "$2" ]; then
            mv "$1" "$2";
            return $?
        else
            return 1;
        fi
    fi

    return 1;
}

SEPERATOR='/';
#=============================================
# detect the path string have a tail slash.
#   arg1: path
# 
# return:
#   0 : NO
#   1 : YES
function have_tail_slash()
{
    local path=$1;

    if [ -n $path ]; then
        local len=`expr ${#path} - 1`;
        local ch=${path:$len:1};
        if [ $ch = $SEPERATOR ]; then
            return 1;
        else
            return 0;
        fi
    else
        return 0;
    fi
}

MD5="/usr/bin/md5sum"
function validate_checksum() {
  cksum=`$MD5 "$1" | sed 's/.*\([0-9a-fA-F]\{32\}\).*/\1/'`
  valid=`< "$srcdir/${1%-t}.md5"`
  test "x$cksum" = "x$valid"
}

G_LOG_MIN_LINE_NUM=1000
G_LOG_MAX_LINE_NUM=10000
G_PID=$$
function clean_log
{
    local log_file="${G_LOG_FILE}"
    local current_line=0
    current_line=`wc -l $log_file | awk '{print $1}'`
    if [ $current_line -ge $G_LOG_MAX_LINE_NUM ]
    then
        tail -${G_LOG_MIN_LINE_NUM}  ${log_file} >${log_file}.${G_PID}
        mv ${log_file}.${G_PID} ${log_file}
    fi
}
